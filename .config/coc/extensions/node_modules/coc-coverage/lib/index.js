"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.activate = void 0;
const coc_nvim_1 = require("coc.nvim");
const chokidar_1 = __importDefault(require("chokidar"));
const istanbul_lib_coverage_1 = require("istanbul-lib-coverage");
const lodash_debounce_1 = __importDefault(require("lodash.debounce"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const DEFAULT_REPORT_PATH = '/coverage/coverage-final.json';
const signGroup = 'CocCoverage';
const cachedReport = {
    json: {},
};
function updateSign(doc, sign, signGroup, signPriority) {
    const filepath = coc_nvim_1.Uri.parse(doc.uri).fsPath;
    const workspaceDir = coc_nvim_1.workspace.getWorkspaceFolder(doc.uri);
    const relativeFilepath = workspaceDir ? path_1.default.relative(workspaceDir.uri, doc.uri) : '';
    const stats = cachedReport.json[filepath] || cachedReport.json[relativeFilepath];
    if (stats) {
        const fileCoverage = istanbul_lib_coverage_1.createFileCoverage(stats);
        const uncoveredLines = fileCoverage.getUncoveredLines();
        const summary = fileCoverage.toSummary();
        coc_nvim_1.workspace.nvim.setVar('coc_coverage_branches_pct', `${summary.branches.pct}`, true);
        coc_nvim_1.workspace.nvim.setVar('coc_coverage_lines_pct', `${summary.lines.pct}`, true);
        coc_nvim_1.workspace.nvim.setVar('coc_coverage_functions_pct', `${summary.functions.pct}`, true);
        coc_nvim_1.workspace.nvim.setVar('coc_coverage_statements_pct', `${summary.statements.pct}`, true);
        coc_nvim_1.workspace.nvim.pauseNotification();
        coc_nvim_1.workspace.nvim.call('sign_unplace', [signGroup, { buffer: doc.bufnr }], true);
        uncoveredLines.forEach((lnum) => {
            coc_nvim_1.workspace.nvim.call('sign_place', [0, signGroup, sign, doc.bufnr, { lnum: lnum, priority: signPriority }], true);
        });
        coc_nvim_1.workspace.nvim.resumeNotification(false, true);
    }
}
async function activate(context) {
    const config = coc_nvim_1.workspace.getConfiguration('coverage');
    const enabled = config.get('enabled', true);
    if (!enabled) {
        return;
    }
    const signPriority = config.get('signPriority', 10);
    const uncoveredSign = config.get('uncoveredSign.text', 'â–£');
    const hlGroup = config.get('uncoveredSign.hlGroup', 'UncoveredLine');
    const reportPath = config.get('jsonReportPath', DEFAULT_REPORT_PATH);
    const debounceReadFile = lodash_debounce_1.default((path) => {
        const str = fs_1.default.readFileSync(path).toString();
        const json = JSON.parse(str);
        cachedReport.json = json;
        coc_nvim_1.workspace.document.then((doc) => {
            updateSign(doc, 'CocCoverageUncovered', signGroup, signPriority);
        });
    }, 2000);
    function startWatch(path) {
        if (fs_1.default.existsSync(path)) {
            // Initial read
            debounceReadFile(path);
        }
        // Start watcher
        const watcher = chokidar_1.default.watch(path, { persistent: true });
        watcher
            .on('change', (path) => {
            debounceReadFile(path);
        })
            .on('add', (path) => {
            debounceReadFile(path);
        });
    }
    coc_nvim_1.workspace.nvim.command(`sign define CocCoverageUncovered text=${uncoveredSign} texthl=CocCoverageUncoveredSign`, true);
    coc_nvim_1.workspace.nvim.command(`hi default link CocCoverageUncoveredSign ${hlGroup}`, true);
    // workspace.nvim.command(`hi UncoveredLine guifg=#ffaa00`, true);
    startWatch(path_1.default.join(coc_nvim_1.workspace.root, reportPath));
    context.subscriptions.push(coc_nvim_1.workspace.registerAutocmd({
        event: ['BufEnter'],
        request: true,
        callback: async () => {
            const doc = await coc_nvim_1.workspace.document;
            updateSign(doc, 'CocCoverageUncovered', signGroup, signPriority);
        },
    }));
}
exports.activate = activate;
//# sourceMappingURL=index.js.map