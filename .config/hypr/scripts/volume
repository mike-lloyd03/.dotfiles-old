#!/bin/bash
MAX_VOLUME=150 # percent
STEP_SIZE=5    # percent
DUNST_ID=998798
NOTIFY_CMD="dunstify -r $DUNST_ID -h string:x-dunst-stack-tag:popup"

function is_muted() {
  mute_status="$(pactl get-sink-mute @DEFAULT_SINK@ | awk '{print $2}')"
  if [ "$mute_status" = 'yes' ]; then
    return 0
  fi
  return 1
}

function get_volume() {
  pactl get-sink-volume @DEFAULT_SINK@ |
    head -1 |
    sed 's/.*front-left: *[0-9]* *\/ *\([0-9]*\).*/\1/'
}

function volume_up() {
  if is_muted; then
    pactl set-sink-mute @DEFAULT_SINK@ 0
  else
    if [ "$(get_volume)" -lt $((MAX_VOLUME - STEP_SIZE)) ]; then
      pactl set-sink-volume @DEFAULT_SINK@ +${STEP_SIZE}%
    elif [ "$(get_volume)" -ge $((MAX_VOLUME - STEP_SIZE)) ]; then
      pactl set-sink-volume @DEFAULT_SINK@ ${MAX_VOLUME}%
    fi
  fi

  notify
}

function volume_down() {
  if is_muted; then
    pactl set-sink-mute @DEFAULT_SINK@ 0
  else
    pactl set-sink-volume @DEFAULT_SINK@ -${STEP_SIZE}%
  fi

  notify
}

function toggle_mute() {
  pactl set-sink-mute @DEFAULT_SINK@ toggle

  notify
}

function notify() {
  if ! is_muted; then
    vol_bar=$((($(get_volume) * 100) / MAX_VOLUME))
    $NOTIFY_CMD "Volume: $(get_volume)%" -h int:value:$vol_bar
  else
    $NOTIFY_CMD "Volume: muted" -h int:value:0
  fi
}

case "$1" in
up)
  volume_up
  ;;
down)
  volume_down
  ;;
mute)
  toggle_mute
  ;;
*)
  echo "Subcommand $1 invalid"
  exit 1
  ;;
esac
